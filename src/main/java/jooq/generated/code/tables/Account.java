/*
 * This file is generated by jOOQ.
 */
package jooq.generated.code.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import jooq.generated.code.Indexes;
import jooq.generated.code.Keys;
import jooq.generated.code.Public;
import jooq.generated.code.tables.records.AccountRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = -800963018;

    /**
     * The reference instance of <code>PUBLIC.ACCOUNT</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public final TableField<AccountRecord, UUID> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.BANK_ID</code>.
     */
    public final TableField<AccountRecord, UUID> BANK_ID = createField(DSL.name("BANK_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.NAME</code>.
     */
    public final TableField<AccountRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.CUSTOMER_ID</code>.
     */
    public final TableField<AccountRecord, UUID> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.CURRENT_BALANCE</code>.
     */
    public final TableField<AccountRecord, BigDecimal> CURRENT_BALANCE = createField(DSL.name("CURRENT_BALANCE"), org.jooq.impl.SQLDataType.DECIMAL.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.CURRENCY_ID</code>.
     */
    public final TableField<AccountRecord, Integer> CURRENCY_ID = createField(DSL.name("CURRENCY_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.STATUS</code>.
     */
    public final TableField<AccountRecord, Integer> STATUS = createField(DSL.name("STATUS"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ACCOUNT.TYPE_ID</code>.
     */
    public final TableField<AccountRecord, Integer> TYPE_ID = createField(DSL.name("TYPE_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ACCOUNT</code> table reference
     */
    public Account() {
        this(DSL.name("ACCOUNT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>PUBLIC.ACCOUNT</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_ACCOUNT_TYPE_ID_FK_INDEX_E, Indexes.ACCOUNT_BANK_ID_FK_INDEX_E, Indexes.ACCOUNT_CURRENCY_ID_FK_INDEX_E, Indexes.ACCOUNT_CUSTOMER_ID_FK_INDEX_E, Indexes.PRIMARY_KEY_E);
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.ACCOUNT_PK;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.ACCOUNT_PK);
    }

    @Override
    public List<ForeignKey<AccountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountRecord, ?>>asList(Keys.ACCOUNT_BANK_ID_FK, Keys.ACCOUNT_CUSTOMER_ID_FK, Keys.ACCOUNT_CURRENCY_ID_FK, Keys.ACCOUNT_ACCOUNT_TYPE_ID_FK);
    }

    public Bank bank() {
        return new Bank(this, Keys.ACCOUNT_BANK_ID_FK);
    }

    public Customer customer() {
        return new Customer(this, Keys.ACCOUNT_CUSTOMER_ID_FK);
    }

    public Currency currency() {
        return new Currency(this, Keys.ACCOUNT_CURRENCY_ID_FK);
    }

    public AccountType accountType() {
        return new AccountType(this, Keys.ACCOUNT_ACCOUNT_TYPE_ID_FK);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, UUID, BigDecimal, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
