/*
 * This file is generated by jOOQ.
 */
package jooq.generated.code.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import jooq.generated.code.Indexes;
import jooq.generated.code.Keys;
import jooq.generated.code.Public;
import jooq.generated.code.tables.records.BankRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = -1508707076;

    /**
     * The reference instance of <code>PUBLIC.BANK</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>PUBLIC.BANK.ID</code>.
     */
    public final TableField<BankRecord, UUID> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BANK.NAME</code>.
     */
    public final TableField<BankRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BANK.SWIFT_CODE</code>.
     */
    public final TableField<BankRecord, String> SWIFT_CODE = createField(DSL.name("SWIFT_CODE"), org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.BANK</code> table reference
     */
    public Bank() {
        this(DSL.name("BANK"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.BANK</code> table reference
     */
    public Bank(String alias) {
        this(DSL.name(alias), BANK);
    }

    /**
     * Create an aliased <code>PUBLIC.BANK</code> table reference
     */
    public Bank(Name alias) {
        this(alias, BANK);
    }

    private Bank(Name alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(Name alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Bank(Table<O> child, ForeignKey<O, BankRecord> key) {
        super(child, key, BANK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_1);
    }

    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.BANK_PK;
    }

    @Override
    public List<UniqueKey<BankRecord>> getKeys() {
        return Arrays.<UniqueKey<BankRecord>>asList(Keys.BANK_PK);
    }

    @Override
    public Bank as(String alias) {
        return new Bank(DSL.name(alias), this);
    }

    @Override
    public Bank as(Name alias) {
        return new Bank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(Name name) {
        return new Bank(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
